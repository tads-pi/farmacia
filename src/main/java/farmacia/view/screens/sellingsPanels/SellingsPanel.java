/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package farmacia.view.screens.sellingsPanels;

import farmacia.view.classes.Inventario;
import farmacia.view.classes.ItemVenda;
import farmacia.view.classes.Produto;
import farmacia.view.classes.Venda;
import farmacia.view.interfaces.IItemsPanel;
import farmacia.view.interfaces.IReportsPanel;
import farmacia.view.interfaces.ISellingsPanel;
import farmacia.view.libs.TableUtils;
import farmacia.view.libs.mysql.dao.ItemVendaDAO;
import farmacia.view.libs.mysql.dao.SellingsHistoryDAO;
import java.util.ArrayList;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kcalixto
 */
public class SellingsPanel extends javax.swing.JPanel implements ISellingsPanel, IItemsPanel, IReportsPanel {

    private ArrayList<ISellingsPanel> sellingsisteners = new ArrayList<ISellingsPanel>();
    private ArrayList<IItemsPanel> reloadListeners = new ArrayList<IItemsPanel>();

    /**
     * Creates new form GetCPFPanel
     */
    public SellingsPanel() {
        initComponents();
        TableUtils.addToolTip(cartTable);
        TableUtils.addToolTip(tbProdutos);
        loadTable(loadInventario());
    }

    /**
     * @return ArrayList<Inventario> com todos os inventarios
     */
    public ArrayList<Inventario> loadInventario() {
        ArrayList<Inventario> response = inventarioDAO.findAll();
        System.out.println("Loaded " + response.size() + " produtos");
        return response;
    }

    /**
     * Carrega tbProdutos com dados informados
     * @param inventario
     */
    public void loadTable(ArrayList<Inventario> inventario) {
        System.out.println("filling table inventario-sellings with " + inventario.size() + " items");
        DefaultTableModel model = (DefaultTableModel) tbProdutos.getModel();
        model.getDataVector().removeAllElements();

        for (Inventario i : inventario) {
            model.addRow(new Object[] { i.getProduto().getId(), i.getProduto().getNome() });
        }
        System.out.println("filled table inventario-sellings successfully");
    }

    /**
     * Adiciona outro JInternalFrame como listener das ações de CONTINUAR e CANCELAR
     * 
     * {@link farmacia.view.screens.SellingsInternalFrame#confirmPressed(int)}
     * {@link farmacia.view.screens.SellingsInternalFrame#cancelPressed(int)}
     * 
     * @param toAdd
     */
    public void addSellingsListener(ISellingsPanel toAdd) {
        sellingsisteners.add(toAdd);
    }

    /**
     * Adiciona outro JInternalFrame como listener da ação de recarregar tabela
     * 
     * {@link farmacia.view.screens.ItemsInternalFrame#reloadTable}
     * {@link farmacia.view.screens.ReportsInternalFrame#reloadTable}
     * @param IItemsPanel
     * @return void
     * 
     */
    public void addReloadListener(IItemsPanel toAdd) {
        reloadListeners.add(toAdd);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cancelButton = new farmacia.view.libs.buttons.CancelButton();
        confirmButton = new farmacia.view.libs.buttons.ConfirmButton();
        searchLabel = new javax.swing.JLabel();
        searchInput = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbProdutos = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        cartTable = new javax.swing.JTable();
        addButton = new javax.swing.JButton();
        spinnerAmount = new javax.swing.JSpinner();
        deleteButton = new javax.swing.JButton();
        totalLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        logo1 = new farmacia.view.libs.Logo();

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(640, 640));
        setMinimumSize(new java.awt.Dimension(640, 640));

        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        searchLabel.setBackground(new java.awt.Color(0, 0, 0));
        searchLabel.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        searchLabel.setForeground(new java.awt.Color(0, 0, 0));
        searchLabel.setText("Nome Do Produto");

        searchButton.setText("Pesquisar");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        tbProdutos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Nome Do Produto"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbProdutos);
        if (tbProdutos.getColumnModel().getColumnCount() > 0) {
            tbProdutos.getColumnModel().getColumn(0).setPreferredWidth(5);
        }

        cartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Nome Do Produto", "Qntd", "Vl Un.", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(cartTable);
        if (cartTable.getColumnModel().getColumnCount() > 0) {
            cartTable.getColumnModel().getColumn(0).setPreferredWidth(5);
        }

        addButton.setText("Adicionar");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Excluir");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        totalLabel.setFont(new java.awt.Font("Monospaced", 0, 48)); // NOI18N
        totalLabel.setForeground(new java.awt.Color(0, 0, 0));
        totalLabel.setText("00,00");

        jLabel1.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("R$");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(searchLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(searchInput))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(spinnerAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(addButton))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                        .addGap(31, 31, 31)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(deleteButton)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 462, Short.MAX_VALUE)
                        .addComponent(confirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(totalLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addGap(28, 28, 28))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(logo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(logo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(71, 71, 71)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalLabel)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addButton)
                            .addComponent(spinnerAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(confirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addButtonActionPerformed
        Produto selectedProduto = produtosDAO.findById(getSelectedProdutoID());
        int amount = (Integer) spinnerAmount.getValue();
        spinnerAmount.setValue(1);
        addProdutoToCart(selectedProduto, amount);
    }// GEN-LAST:event_addButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_deleteButtonActionPerformed
        int index = cartTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) cartTable.getModel();
        model.removeRow(index);
        updateTotalCount();
    }// GEN-LAST:event_deleteButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_searchButtonActionPerformed
        ArrayList<Inventario> searchResult = inventarioDAO.search(searchInput.getText());

        loadTable(searchResult);
    }// GEN-LAST:event_searchButtonActionPerformed

    /**
     * @return id_produto do produto selecionada na tbProdutos
     */
    private int getSelectedProdutoID() {
        int index = tbProdutos.getSelectedRow();
        DefaultTableModel md = (DefaultTableModel) tbProdutos.getModel();

        if (index != -1) {
            return (int) md.getValueAt(index, 0);
        } else {
            System.out.println("Selecione um item parar editar.");
            return -1;
        }
    }

    /**
     * Adiciona produto na cartTable
     * @param produto
     * @param amount quantidade
     */
    public void addProdutoToCart(Produto produto, int amount) {
        if (amount <= 0 || produto.isEmpty())
            return;
        DefaultTableModel model = (DefaultTableModel) cartTable.getModel();

        double total = produto.getValorUnitario() * amount;
        model.addRow(new Object[] { produto.getId(), produto.getNome(), amount, produto.getValorUnitario(), total });

        updateTotalCount();
        System.out.println("added " + produto.getNome() + " to cart successfully");
    }

    /**
     * Atualiza label de total
     * @return total da soma dos produtos da tabela
     */
    public double updateTotalCount() {
        DefaultTableModel model = (DefaultTableModel) cartTable.getModel();
        double total = 0.0;

        for (int i = 0; i < model.getRowCount(); i++) {
            // 4 = total column
            total += (Double) model.getValueAt(i, 4);
        }

        totalLabel.setText(String.format("%.2f", total));
        return total;
    }

    /**
     * @return ArrayList de itemVenda dos produtos 
     */
    public ArrayList<ItemVenda> getCart() {
        ArrayList<ItemVenda> response = new ArrayList<ItemVenda>();
        DefaultTableModel model = (DefaultTableModel) cartTable.getModel();

        int ID_INVENTARIO_INDEX = 0;
        int ID_QUANTIDADE_INDEX = 2;
        int ID_TOTAL_INDEX = 4;

        for (int i = 0; i < model.getRowCount(); i++) {
            Inventario inventario = inventarioDAO.findById((int) model.getValueAt(i, ID_INVENTARIO_INDEX));

            Produto produto = produtosDAO.findById(inventario.getProduto().getId());

            ItemVenda item = new ItemVenda(
                    produto,
                    // TODO fix double-int issue in quantidades
                    (int) model.getValueAt(i, ID_QUANTIDADE_INDEX),
                    produto.getValorUnitario(),
                    (double) model.getValueAt(i, ID_TOTAL_INDEX));
            response.add(item);
        }

        return response;
    }

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_confirmButtonActionPerformed
        int confirm = JOptionPane.showConfirmDialog(this, "Confirmar Compra?");
        int YES = 0;
        int NO = 1;
        int CANCEL = 2;
        if (confirm == YES) {
            ArrayList<ItemVenda> cart = getCart();

            Venda venda = new Venda(clienteAtual, cart, updateTotalCount());
            int id_venda = vendasDao.execute(venda, SellingsHistoryDAO.INSERT);

            for (ItemVenda itemVenda : cart) {
                itemVenda.setIdVenda(id_venda);
                itemVendaDAO.execute(itemVenda, ItemVendaDAO.INSERT);
                // Insert ItemVenda affects inventario
                inventarioDAO.soldItem(itemVenda.getProduto().getId(), itemVenda.getQuantidade());
            }

            clearTable();

            // Notify everybody that may be interested.
            for (ISellingsPanel ll : sellingsisteners) {
                ll.confirmPressed(STEP_CONFIRM_SELLING);
            }
            for (IItemsPanel ll : reloadListeners) {
                ll.reloadTable();
            }

        } else {
            // Do Nothing
        }
    }// GEN-LAST:event_confirmButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cancelButtonActionPerformed
        for (ISellingsPanel ll : sellingsisteners) {
            ll.cancelPressed(STEP_CANCEL_SELLING);
        }
    }// GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Limpa tabelas
     */
    public void clearTable() {
        DefaultTableModel model = (DefaultTableModel) cartTable.getModel();
        model.getDataVector().removeAllElements();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private farmacia.view.libs.buttons.CancelButton cancelButton;
    private javax.swing.JTable cartTable;
    private farmacia.view.libs.buttons.ConfirmButton confirmButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private farmacia.view.libs.Logo logo1;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchInput;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JSpinner spinnerAmount;
    private javax.swing.JTable tbProdutos;
    private javax.swing.JLabel totalLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void confirmPressed(int newStep) {

    }

    @Override
    public void cancelPressed(int newStep) {

    }

    @Override
    /**
     * Executa processos necessários para atualizar as tabelas
     * 
     * @param void
     * @return void
     */
    public void reloadTable() {
        loadTable(loadInventario());
    }
}